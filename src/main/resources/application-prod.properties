# Configuração para ambiente de produção (Render.com)
spring.application.name=rpg_market
server.port=${PORT:8080}
server.error.whitelabel.enabled=false

# Configurações de timeout e performance
server.connection-timeout=20000
server.max-http-header-size=8192
server.tomcat.max-connections=200
server.tomcat.threads.max=10
server.tomcat.threads.min-spare=5

# Logging otimizado para produção
logging.level.com.programacao_web.rpg_market=INFO
logging.level.org.springframework.security=WARN
logging.level.org.springframework.web=WARN
logging.level.org.springframework=WARN
logging.level.org.springframework.boot.autoconfigure=WARN
logging.level.org.springframework.data.mongodb=WARN
logging.level.root=WARN

# Configuração do MongoDB usando variáveis de ambiente
spring.data.mongodb.database=${MONGODB_DATABASE:Cluster0}
spring.data.mongodb.uri=${MONGODB_URI:mongodb+srv://admin:batata123@cluster0.clcxyly.mongodb.net/?}

# Configurações do MongoDB para produção
spring.data.mongodb.auto-index-creation=false

# Configuração Thymeleaf para produção
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.cache=true

# Configuração de Upload de Arquivos para Render.com
spring.servlet.multipart.enabled=true
spring.servlet.multipart.file-size-threshold=2KB
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Diretório de upload (Render.com tem sistema de arquivos efêmero)
app.upload.dir=${APP_UPLOAD_DIR:/tmp/uploads}

# Configurações adicionais para produção
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=validate

# Configurações de async e CORS para produção
spring.task.execution.pool.core-size=2
spring.task.execution.pool.max-size=5
spring.task.execution.pool.queue-capacity=100
spring.task.execution.thread-name-prefix=async-

# Profile ativo
spring.profiles.active=prod
